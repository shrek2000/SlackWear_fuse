
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}

apply plugin: 'com.android.application'


repositories {
    jcenter()
}

dependencies {
    compile 'com.google.android.gms:play-services-location:8.4.0'
    compile 'com.google.maps.android:android-maps-utils:0.3.4'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.google.android.gms:play-services-wearable:8.4.0'
    compile 'com.android.support:support-v13:23.1.1'
    compile 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.8.3'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'com.google.guava:guava:18.0'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'org.threeten:threetenbp:1.3.1'
    compile 'com.squareup.okhttp3:okhttp:3.1.2'
    compile project(':Shared')
    wearApp project(':Wearable')

    testCompile 'org.jmockit:jmockit:1.12'
    testCompile 'org.assertj:assertj-core:1.7.0'
    testCompile 'junit:junit:4.10'
    testCompile 'org.slf4j:slf4j-simple:1.7.7'
}

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
    'main',     // main sample code; look here for the interesting stuff.
    'common',   // components that are reused by multiple samples
    'template'] // boilerplate code that is generated by the sample template process

android {
    compileSdkVersion 23

    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
            }
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']

    }

}
